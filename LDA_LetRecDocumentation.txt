> #LDA
> 
> #Importing the dataset
> dataset = read.csv("letter-recognition.data")
> 
> #Modifying Data
> dataset = cbind(dataset[c(2:17)], dataset[1])
> str(dataset)
'data.frame':	20000 obs. of  17 variables:
 $ x.box : int  2 5 4 7 2 4 4 1 2 11 ...
 $ y.box : int  8 12 11 11 1 11 2 1 2 15 ...
 $ width : int  3 3 6 6 3 5 5 3 4 13 ...
 $ height: int  5 7 8 6 1 8 4 2 4 9 ...
 $ onpix : int  1 2 6 3 1 3 4 1 2 7 ...
 $ x.bar : int  8 10 10 5 8 8 8 8 10 13 ...
 $ y.bar : int  13 5 6 9 6 8 7 2 6 2 ...
 $ x2bar : int  0 5 2 4 6 6 6 2 2 6 ...
 $ y2bar : int  6 4 6 6 6 9 6 2 6 2 ...
 $ xybar : int  6 13 10 4 6 5 7 8 12 12 ...
 $ x2ybar: int  10 3 3 4 5 6 6 2 4 1 ...
 $ xy2bar: int  8 9 7 10 9 6 6 8 8 9 ...
 $ x.ege : int  0 2 3 6 1 0 2 1 1 8 ...
 $ xegvy : int  8 8 7 10 7 8 8 6 6 1 ...
 $ y.ege : int  0 4 3 2 5 9 7 2 1 1 ...
 $ yegvx : int  8 10 9 8 10 7 10 7 7 8 ...
 $ letter: Factor w/ 26 levels "A","B","C","D",..: 20 9 4 14 7 19 2 1 10 13 ...
> 
> #Splitting the dataset into Training set and Test set
> library(caTools)
> set.seed(123)
> split = sample.split(dataset$letter, SplitRatio = 0.8)
> training_set = subset(dataset, split == TRUE)
> test_set = subset(dataset, split == FALSE)
> 
> #Feature Scaling
> training_set[-17] = scale(training_set[-17])
> test_set[-17] = scale(test_set[-17])
> 
> #Appling LDA
> library(MASS)
> lda = lda(formula = letter~., data = training_set)
> training_set_lda = as.data.frame(predict(lda, training_set))
> training_set_lda = cbind(training_set_lda[c(28:37)], training_set_lda[1])
> test_set_lda = as.data.frame(predict(lda, test_set))
> test_set_lda = cbind(test_set_lda[c(28:37)], test_set_lda[1])
> 
> #Fitting SVM to the Training set
> library(e1071)
> classifier = svm(formula = class~.,
+                  data = training_set_lda,
+                  type = "C-classification",
+                  kernel = "linear")
> 
> #Predicting the Test set Results
> pred = predict(classifier, newdata = test_set_lda[-11])
> 
> #Making the Confusion Matrix
> cm = table(test_set_lda[, 11], pred)
> cm
   pred
      A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V
  A 151   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0
  B   0 168   0   1   0   0   3   0   0   0   0   0   0   0   0   0   3   9   7   0   0   0
  C   0   0 144   0   4   0   3   0   0   0   3   0   0   0   0   0   0   0   0   0   0   0
  D   0   2   0 161   0   0   0   1   0   0   0   0   0   1   4   1   0   4   0   1   0   0
  E   0   0   0   0  90   0   7   0   0   0   6   0   0   0   0   0   0   0   4   0   0   0
  F   0   1   0   1   0 146   0   0   0   0   0   0   0   0   0   2   0   0   2   1   0   1
  G   0   2   0   0   4   0 136   1   0   0   2   0   0   0   1   0   5   1   1   0   0   0
  H   0   0   0   5   0   1   1  90   0   0   2   0   0   8  26   0   1   0   0   0   1   0
  I   0   0   0   1   0   1   0   0 143   0   0   2   0   0   0   0   0   0   0   1   0   0
  J   2   0   0   0   0   0   0   0   3 117   0   0   0   0   0   0   2   0   0   0   0   0
  K   2   0   0   1   0   0   2   2   0   0 142   0   0   0   3   0   0   0   0   0   1   0
  L   0   0   0   0   0   0   0   0   0   0   0 105   0   0   0   0   0   0   0   0   0   0
  M   0   0   0   0   0   0   0   0   0   0   0   0 165   2   0   0   0   0   0   0   1   0
  N   0   0   1   1   0   1   0   8   0   0   2   0   1 138   0   0   0   2   0   0   0   0
  O   0   1   0   2   0   0   1  11   0   2   5   0   0   1 137   0   4   1   0   0   0   0
  P   0   0   0   1   0   7   0   0   0   0   0   0   0   0   0 155   0   0   0   0   0   1
  Q   0   0   0   0   1   0   8   1   0   4   0   0   0   0   7   1 125   1   1   0   1   0
  R   3   5   0   3   0   0   0   0   0   0   1   0   0   0   0   0   0 176   0   0   0   0
  S   0   9   0   1   2   0   1   0   2   0   0   0   0   0   0   0   5   0 154   1   0   0
  T   0   1   0   0   0   2   0   0   0   0   0   0   0   0   0   0   0   0   0 117   0   0
  U   0   0   1   1   0   0   0   3   0   0   1   0   0   1   1   0   0   0   0   0 150   1
  V   0   0   0   0   0   2   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0 151
  W   0   0   0   0   0   0   0   1   0   0   3   0   1   7   0   0   0   0   0   0   0   1
  X   0   0   0   1   3   0   1   0   2   0   1   0   0   0   0   0   3   1   3   0   0   0
  Y   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   3   2  12
  Z   0   0   0   0   2   0   0   0   0   0   0   0   0   0   0   0   0   0  12   0   0   0
   pred
      W   X   Y   Z
  A   0   0   0   0
  B   0   4   0   0
  C   0   0   0   0
  D   0   0   0   0
  E   0   3   0   3
  F   0   2   2   0
  G   0   2   0   0
  H   2   1   0   0
  I   0   0   0   0
  J   0   0   0   0
  K   2   4   0   0
  L   0   0   0   0
  M   1   0   0   0
  N   3   1   0   0
  O   0   3   0   0
  P   0   0   0   0
  Q   0   2   1   0
  R   1   0   0   0
  S   0   7   0   7
  T   0   0   1   0
  U   0   1   0   0
  V   2   0   5   0
  W 157   0   0   0
  X   0 180   0   0
  Y   0   2  85   0
  Z   0   1   0 109
> sum(diag(cm))/sum(cm)
[1] 0.8975512
> 
> #Bi-Plot
> library(devtools)
> dev.off()
> #install_github("fawda123/ggord")
> library(ggord)
> ggord(lda, training_set_lda$class)